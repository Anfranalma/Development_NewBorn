'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.42.
'
Namespace localhost
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Service
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private ConsultaEmpleadosOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertaEmpleadosOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ModificaEmpleadosOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.clsForms.My.MySettings.Default.clsForms_localhost_Service
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event ConsultaEmpleadosCompleted As ConsultaEmpleadosCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertaEmpleadosCompleted As InsertaEmpleadosCompletedEventHandler
        
        '''<remarks/>
        Public Event ModificaEmpleadosCompleted As ModificaEmpleadosCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConsultaEmpleados", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsultaEmpleados(ByVal stabla As String, ByVal scampos As String, ByVal sfiltro As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ConsultaEmpleados", New Object() {stabla, scampos, sfiltro})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConsultaEmpleadosAsync(ByVal stabla As String, ByVal scampos As String, ByVal sfiltro As String)
            Me.ConsultaEmpleadosAsync(stabla, scampos, sfiltro, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConsultaEmpleadosAsync(ByVal stabla As String, ByVal scampos As String, ByVal sfiltro As String, ByVal userState As Object)
            If (Me.ConsultaEmpleadosOperationCompleted Is Nothing) Then
                Me.ConsultaEmpleadosOperationCompleted = AddressOf Me.OnConsultaEmpleadosOperationCompleted
            End If
            Me.InvokeAsync("ConsultaEmpleados", New Object() {stabla, scampos, sfiltro}, Me.ConsultaEmpleadosOperationCompleted, userState)
        End Sub
        
        Private Sub OnConsultaEmpleadosOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConsultaEmpleadosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConsultaEmpleadosCompleted(Me, New ConsultaEmpleadosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertaEmpleados", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertaEmpleados(ByVal sPrimNom As String, ByVal sSecNom As String, ByVal sPrimApe As String, ByVal sSecApe As String, ByVal sDir As String, ByVal sTelefono As String, ByVal sCel As String, ByVal sCargo As String, ByVal sState As String) As Boolean
            Dim results() As Object = Me.Invoke("InsertaEmpleados", New Object() {sPrimNom, sSecNom, sPrimApe, sSecApe, sDir, sTelefono, sCel, sCargo, sState})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertaEmpleadosAsync(ByVal sPrimNom As String, ByVal sSecNom As String, ByVal sPrimApe As String, ByVal sSecApe As String, ByVal sDir As String, ByVal sTelefono As String, ByVal sCel As String, ByVal sCargo As String, ByVal sState As String)
            Me.InsertaEmpleadosAsync(sPrimNom, sSecNom, sPrimApe, sSecApe, sDir, sTelefono, sCel, sCargo, sState, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertaEmpleadosAsync(ByVal sPrimNom As String, ByVal sSecNom As String, ByVal sPrimApe As String, ByVal sSecApe As String, ByVal sDir As String, ByVal sTelefono As String, ByVal sCel As String, ByVal sCargo As String, ByVal sState As String, ByVal userState As Object)
            If (Me.InsertaEmpleadosOperationCompleted Is Nothing) Then
                Me.InsertaEmpleadosOperationCompleted = AddressOf Me.OnInsertaEmpleadosOperationCompleted
            End If
            Me.InvokeAsync("InsertaEmpleados", New Object() {sPrimNom, sSecNom, sPrimApe, sSecApe, sDir, sTelefono, sCel, sCargo, sState}, Me.InsertaEmpleadosOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertaEmpleadosOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertaEmpleadosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertaEmpleadosCompleted(Me, New InsertaEmpleadosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ModificaEmpleados", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ModificaEmpleados(ByVal sCod As Integer, ByVal sPrimNom As String, ByVal sSecNom As String, ByVal sPrimApe As String, ByVal sSecApe As String, ByVal sDir As String, ByVal sTelefono As String, ByVal sCel As String, ByVal sCargo As String, ByVal sState As String) As Boolean
            Dim results() As Object = Me.Invoke("ModificaEmpleados", New Object() {sCod, sPrimNom, sSecNom, sPrimApe, sSecApe, sDir, sTelefono, sCel, sCargo, sState})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ModificaEmpleadosAsync(ByVal sCod As Integer, ByVal sPrimNom As String, ByVal sSecNom As String, ByVal sPrimApe As String, ByVal sSecApe As String, ByVal sDir As String, ByVal sTelefono As String, ByVal sCel As String, ByVal sCargo As String, ByVal sState As String)
            Me.ModificaEmpleadosAsync(sCod, sPrimNom, sSecNom, sPrimApe, sSecApe, sDir, sTelefono, sCel, sCargo, sState, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ModificaEmpleadosAsync(ByVal sCod As Integer, ByVal sPrimNom As String, ByVal sSecNom As String, ByVal sPrimApe As String, ByVal sSecApe As String, ByVal sDir As String, ByVal sTelefono As String, ByVal sCel As String, ByVal sCargo As String, ByVal sState As String, ByVal userState As Object)
            If (Me.ModificaEmpleadosOperationCompleted Is Nothing) Then
                Me.ModificaEmpleadosOperationCompleted = AddressOf Me.OnModificaEmpleadosOperationCompleted
            End If
            Me.InvokeAsync("ModificaEmpleados", New Object() {sCod, sPrimNom, sSecNom, sPrimApe, sSecApe, sDir, sTelefono, sCel, sCargo, sState}, Me.ModificaEmpleadosOperationCompleted, userState)
        End Sub
        
        Private Sub OnModificaEmpleadosOperationCompleted(ByVal arg As Object)
            If (Not (Me.ModificaEmpleadosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ModificaEmpleadosCompleted(Me, New ModificaEmpleadosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub ConsultaEmpleadosCompletedEventHandler(ByVal sender As Object, ByVal e As ConsultaEmpleadosCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConsultaEmpleadosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub InsertaEmpleadosCompletedEventHandler(ByVal sender As Object, ByVal e As InsertaEmpleadosCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertaEmpleadosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub ModificaEmpleadosCompletedEventHandler(ByVal sender As Object, ByVal e As ModificaEmpleadosCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ModificaEmpleadosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
End Namespace
